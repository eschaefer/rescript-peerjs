// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Peerjs from "peerjs";

var peerWithNoOptions = new Peerjs.Peer(undefined, undefined);

var peerWithConfig = new Peerjs.Peer(undefined, {
      debug: 3,
      secure: true
    });

var peerWithPresetId = new Peerjs.Peer("some-id", undefined);

peerWithPresetId.destroy();

peerWithConfig.disconnect();

peerWithNoOptions.reconnect();

var peerId = peerWithConfig.id;

var isPeerDisconnected = peerWithNoOptions.disconnected;

var isPeerDestroyed = peerWithNoOptions.destroyed;

var connectionWithNoOptions = peerWithPresetId.connect("another-peer-id", undefined);

var connectionWithOptions = peerWithConfig.connect("another-peer-id", {
      serialization: "binary",
      reliable: true
    });

connectionWithOptions.send("Hello, world!");

connectionWithNoOptions.close(undefined);

connectionWithOptions.on("open", (function (param) {
        console.log("Connection opened");
      }));

connectionWithNoOptions.on("close", (function (param) {
        console.log("Connection closed");
      }));

connectionWithOptions.on("data", (function (data) {
        console.log("Received data", data);
      }));

connectionWithNoOptions.on("error", (function (error) {
        console.log("Received error", error);
      }));

var dataChannel = connectionWithOptions.dataChannel;

var isConnectionOpen = connectionWithOptions.open;

var metadata = connectionWithNoOptions.metadata;

var peerConnection = connectionWithOptions.peerConnection;

var connectionPeerId = connectionWithNoOptions.peer;

var reliable = connectionWithOptions.reliable;

var serialization = connectionWithOptions.serialization;

var connectionType = connectionWithNoOptions.type;

var bufferSize = connectionWithOptions.bufferSize;

var stream = new MediaStream();

var mediaConnectionWithNoOptions = peerWithPresetId.call("another-peer-id", stream, undefined);

var mediaConnectionWithOptions = peerWithConfig.call("another-peer-id", stream, {
      sdpTransform: (function (sdp) {
          return sdp;
        })
    });

mediaConnectionWithOptions.on("stream", (function (stream) {
        console.log("Received stream", stream);
      }));

mediaConnectionWithNoOptions.on("close", (function (param) {
        console.log("Connection closed");
      }));

mediaConnectionWithOptions.on("error", (function (error) {
        console.log("Received error", error);
      }));

mediaConnectionWithNoOptions.answer(stream, undefined);

mediaConnectionWithOptions.answer(stream, {
      sdpTransform: (function (sdp) {
          return sdp;
        })
    });

mediaConnectionWithNoOptions.close();

mediaConnectionWithOptions.close();

var isMediaConnectionOpen = mediaConnectionWithOptions.open;

var mediaMetadata = mediaConnectionWithNoOptions.metadata;

var mediaPeerId = mediaConnectionWithOptions.peer;

var mediaType = mediaConnectionWithNoOptions.type;

export {
  peerWithNoOptions ,
  peerWithConfig ,
  peerWithPresetId ,
  peerId ,
  isPeerDisconnected ,
  isPeerDestroyed ,
  connectionWithNoOptions ,
  connectionWithOptions ,
  dataChannel ,
  isConnectionOpen ,
  metadata ,
  peerConnection ,
  connectionPeerId ,
  reliable ,
  serialization ,
  connectionType ,
  bufferSize ,
  stream ,
  mediaConnectionWithNoOptions ,
  mediaConnectionWithOptions ,
  isMediaConnectionOpen ,
  mediaMetadata ,
  mediaPeerId ,
  mediaType ,
}
/* peerWithNoOptions Not a pure module */
